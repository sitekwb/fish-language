IDENTIFIER = Letter, {Letter | Digit | "_"};
CONSTANT = "_", UpperLetter, {UpperLetter};

File = {FilePart};
FilePart = FunctionDefinition | ClassDefinition | Statement;
Statement = (CompoundStatement | SimpleStatement), [";"];

SimpleStatement = ExpressionStatement
    | DeleteStatement 
    | ImportStatement 
    | NewStatement 
    | AssignStatement 
    | ControlStatement 
    | AliasStatement;

ExpressionStatement = Expression;
DeleteStatement = "delete", IDENTIFIER;
ImportStatement = "import", IDENTIFIER, ["as", IDENTIFIER];
NewStatement = NewExpression;
AssignStatement = AssignExpression;
ControlStatement = "break" | "continue" | "return", [ConditionalExpression];
AliasStatement = "alias", Type, Type;

Type = IDENTIFIER;
Bool = "true" | "false"

Expression = ConditionalExpression | NewExpression | AssignExpression;

NewExpression = "new", ["mut"], ["static"], [Type], (IDENTIFIER | CONSTANT), ['(', ArgumentList, ')'] [AssignOperator, ConditionalExpresion];
AssignExpression = IDENTIFIER, AssignOperator, ConditionalExpression;

ConditionalExpression = AndExpression, {"or", AndExpression};
AndExpression = OrExpression, {"and", OrExpression};
OrExpression = [UnaryNot], RelativeExpression, {RelativeOperator, [UnaryNot], RelativeExpression};
RelativeExpression = '(' ConditionalExpression ')' | ArithmeticExpression;

ArithmeticExpression = AddExpression, {AddOperator, AddExpression};
AddExpression = MultiplyExpression, {MultiplyOperator, MultiplyExpression};
MultiplyExpression = [UnarySign], Term;
Term = Int | Dbl | Str | Bool | '(', ArithmeticExpression, ')'
      | (IDENTIFIER | CONSTANT | FunctionCall), {ArraySubscript}, {'.', (IDENTIFIER | CONSTANT | FunctionCall), {ArraySubscript}}


FunctionCall = IDENTIFIER, '(', ArgumentList, ')';
ArgumentList = [Argument, {',', Argument}];
Argument =  ConditionalExpression;


AssignOperator = '=' | "+=" | "-=" | "*=" | "/=" | "%=";
RelativeOperator = "==" | "!=" | "<" | ">" | "<=" | ">=";
AddOperator = "+" | "-";
MultiplyOperator = "*" | "/" | "%";
UnarySign = "+" | "-";
UnaryNot = "not" | "!";

ArraySubscript = "[", UnsignedIntTerm, "]";
UnsignedIntTerm = Term;


CompoundStatement = IfStatement | WhileStatement | ForStatement | ForiStatement | ForeachStatement;
BlockInstruction = ("{", {Statement}, "}") | Statement;

IfStatement = "if", '(', ConditionalExpression, ')', BlockInstruction, ["else", BlockInstruction];
WhileStatement = "while", '(', ConditionalExpression, ')', BlockInstruction;
ForStatement = "for", '(', [Expression], ';', ConditionalExpression, ';' [Expression], ')', BlockInstruction;
ForiStatement = "fori", '(', UnsignedIntTerm, ')', BlockInstruction;
ForeachStatement = "foreach", '(', IDENTIFIER, "in", Term, ')', BlockInstruction;
FunctionDefinition = "def", [Type], IDENTIFIER, '(', ParameterList, ')', BlockInstruction;
ClassDefinition = "class", Type, '{', ClassBody, '}';

ParameterList = [Parameter, {',', Parameter}];
Parameter = [Type], IDENTIFIER, ['=', Default];
Default = Term;


ClassBody = {ClassBodyStatement};
ClassBodyStatement = MemberDefinition | FunctionDefinition;
MemberDefinition = ["public" | "private" | "secret"], ["mut"], ["static"], [Type], IDENTIFIER, ['(', ArgumentList, ')'];