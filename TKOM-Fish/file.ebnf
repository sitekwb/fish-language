IDENTIFIER = Letter, {Letter | Digit | "_"};
CONSTANT = "_", UpperLetter, {UpperLetter};

File = {(FunctionDefinition | ClassDefinition | Statement), [";"]};
Statement = IfStatement
                | WhileStatement
                | ForStatement
                | ForiStatement
                | ForeachStatement
                | DeleteStatement
                | ImportStatement
                | ControlStatement
                | AliasStatement
                | NewStatement
                | AssignStatementOrMethodOrFunctionCall

AssignStatementOrMethodOrFunctionCall = IDENTIFIER, (AssignStatement | MethodCallOrPropertyAssign | FunctionCall);
AssignStatement = AssignOperator, ConditionalExpression;
FunctionCall = '(', ArgumentList, ')';
MethodCallOrPropertyAssign = {'.', IDENTIFIER}, (AssignStatement | FunctionCall);

DeleteStatement = "delete", IDENTIFIER;
ImportStatement = "import", IDENTIFIER, ["as", IDENTIFIER];
AssignStatement = AssignStatement;
ControlStatement = "break" | "continue" | "return", [ConditionalExpression | ';'];
AliasStatement = "alias", Type, Type;
NewStatement = "new", ["mut"], ["static"], [Type], IDENTIFIER, ['(', ArgumentList, ')' | AssignOperator, ConditionalExpresion];

BOOL = "true" | "false"


ConditionalExpression = AndExpression, {"or", AndExpression};
AndExpression = OrExpression, {"and", OrExpression};
OrExpression = [UnaryNot], RelativeExpression, {RelativeOperator, [UnaryNot], RelativeExpression};
RelativeExpression = '(' ConditionalExpression ')' | ArithmeticExpression;

ArithmeticExpression = AddExpression, {AddOperator, AddExpression};
AddExpression = MultiplyExpression, {MultiplyOperator, MultiplyExpression};
MultiplyExpression = [UnarySign], Term;
Term = Int | Dbl | Str | Bool | '(', ArithmeticExpression, ')' | (IDENTIFIER, {'.', IDENTIFIER}, [FunctionCall]);


FunctionCall = IDENTIFIER, '(', ArgumentList, ')';
ArgumentList = [Argument, {',', Argument}];
Argument =  ConditionalExpression;


AssignOperator = '=' | "+=" | "-=" | "*=" | "/=" | "%=";
RelativeOperator = "==" | "!=" | "<" | ">" | "<=" | ">=";
AddOperator = "+" | "-";
MultiplyOperator = "*" | "/" | "%";
UnarySign = "+" | "-";
UnaryNot = "not" | "!";



BlockInstruction = ("{", {Statement}, "}") | Statement;

IfStatement = "if", '(', ConditionalExpression, ')', BlockInstruction, ["else", BlockInstruction];
WhileStatement = "while", '(', ConditionalExpression, ')', BlockInstruction;
ForStatement = "for", '(', [NewStatement | AssignStatement], ';', ConditionalExpression, ';' [Expression], ')', BlockInstruction;
ForiStatement = "fori", '(', ArithmeticExpression, ')', BlockInstruction;
ForeachStatement = "foreach", '(', IDENTIFIER, "in", Term, ')', BlockInstruction;
FunctionDefinition = "def", [Type], IDENTIFIER, '(', ParameterList, ')', BlockInstruction;
ClassDefinition = "class", Type, '{', ClassBody, '}';

ParameterList = [Parameter, {',', Parameter}];
Parameter = [Type], IDENTIFIER, ['=', Default];
Default = Term;


ClassBody = {ClassStatement};
ClassStatement = (MemberDefinition | FunctionDefinition), [';'];
MemberDefinition = ["public" | "private" | "secret"], ["mut"], ["static"], [Type], IDENTIFIER;